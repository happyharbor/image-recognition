service: image-recognition
# app and org for use with dashboard.serverless.com
#app: image-recognition
#org: happyharbor

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '2'

custom:
  bucket-name: ${self:service}-${sls:stage}-blobs

provider:
  name: aws
  runtime: java11
  lambdaHashingVersion: 20201221
  httpApi:
    cors: true

# you can overwrite defaults here
#  stage: dev
  region: eu-central-1

  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:PutItem"
        - "dynamodb:GetItem"
      Resource: "arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:resources.Resources.BlobsTable.Properties.TableName}"
    - Effect: "Allow"
      Action:
        - "s3:PutObject"
        - "s3:GetObject"
      Resource:
        - "arn:aws:s3:::${self:custom.bucket-name}/*"
    - Effect: "Allow"
      Action:
        - "rekognition:DetectLabels"
      Resource:
        - "*"

  environment:
    DYNAMO_DB_TABLE_NAME: ${self:resources.Resources.BlobsTable.Properties.TableName}
    REGION: ${self:provider.region}
    BUCKET_NAME: ${self:custom.bucket-name}

package:
  artifact: build/distributions/image-recognition-1.0-SNAPSHOT.zip

functions:
  create-blob:
    handler: io.happyharbor.image.recognition.app.CreateBlobApp
    events:
      - httpApi:
          path: /blobs
          method: post
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

  process-blob:
    handler: io.happyharbor.image.recognition.app.ProcessBlobApp
    events:
      - s3: ${self:custom.bucket-name}

  make-callback:
    handler: io.happyharbor.image.recognition.app.MakeCallbackApp
    events:
      - stream:
          type: dynamodb
          arn:
            !GetAtt BlobsTable.StreamArn

resources:
  Resources:
    BlobsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: blobs-table-${sls:stage}
        AttributeDefinitions:
          - AttributeName: blobId
            AttributeType: S
        KeySchema:
          - AttributeName: blobId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
